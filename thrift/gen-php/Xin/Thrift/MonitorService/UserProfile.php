<?php
namespace Xin\Thrift\MonitorService;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class UserProfile {
  static $_TSPEC;

  /**
   * @var string
   */
  public $login = null;
  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $avatar_url = null;
  /**
   * @var string
   */
  public $html_url = null;
  /**
   * @var string
   */
  public $type = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $company = null;
  /**
   * @var string
   */
  public $blog = null;
  /**
   * @var string
   */
  public $location = null;
  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $bio = null;
  /**
   * @var int
   */
  public $public_repos = null;
  /**
   * @var int
   */
  public $public_gists = null;
  /**
   * @var int
   */
  public $followers = null;
  /**
   * @var int
   */
  public $following = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'login',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'avatar_url',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'html_url',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'company',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'blog',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'location',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'bio',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'public_repos',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'public_gists',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'followers',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'following',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['login'])) {
        $this->login = $vals['login'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['avatar_url'])) {
        $this->avatar_url = $vals['avatar_url'];
      }
      if (isset($vals['html_url'])) {
        $this->html_url = $vals['html_url'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['company'])) {
        $this->company = $vals['company'];
      }
      if (isset($vals['blog'])) {
        $this->blog = $vals['blog'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['bio'])) {
        $this->bio = $vals['bio'];
      }
      if (isset($vals['public_repos'])) {
        $this->public_repos = $vals['public_repos'];
      }
      if (isset($vals['public_gists'])) {
        $this->public_gists = $vals['public_gists'];
      }
      if (isset($vals['followers'])) {
        $this->followers = $vals['followers'];
      }
      if (isset($vals['following'])) {
        $this->following = $vals['following'];
      }
    }
  }

  public function getName() {
    return 'UserProfile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->login);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->avatar_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->html_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->company);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->blog);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->location);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->public_repos);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->public_gists);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->followers);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->following);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserProfile');
    if ($this->login !== null) {
      $xfer += $output->writeFieldBegin('login', TType::STRING, 1);
      $xfer += $output->writeString($this->login);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 2);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avatar_url !== null) {
      $xfer += $output->writeFieldBegin('avatar_url', TType::STRING, 3);
      $xfer += $output->writeString($this->avatar_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->html_url !== null) {
      $xfer += $output->writeFieldBegin('html_url', TType::STRING, 4);
      $xfer += $output->writeString($this->html_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 5);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 6);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->company !== null) {
      $xfer += $output->writeFieldBegin('company', TType::STRING, 7);
      $xfer += $output->writeString($this->company);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blog !== null) {
      $xfer += $output->writeFieldBegin('blog', TType::STRING, 8);
      $xfer += $output->writeString($this->blog);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      $xfer += $output->writeFieldBegin('location', TType::STRING, 9);
      $xfer += $output->writeString($this->location);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 10);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bio !== null) {
      $xfer += $output->writeFieldBegin('bio', TType::STRING, 11);
      $xfer += $output->writeString($this->bio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->public_repos !== null) {
      $xfer += $output->writeFieldBegin('public_repos', TType::I32, 12);
      $xfer += $output->writeI32($this->public_repos);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->public_gists !== null) {
      $xfer += $output->writeFieldBegin('public_gists', TType::I32, 13);
      $xfer += $output->writeI32($this->public_gists);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->followers !== null) {
      $xfer += $output->writeFieldBegin('followers', TType::I32, 14);
      $xfer += $output->writeI32($this->followers);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->following !== null) {
      $xfer += $output->writeFieldBegin('following', TType::I32, 15);
      $xfer += $output->writeI32($this->following);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

